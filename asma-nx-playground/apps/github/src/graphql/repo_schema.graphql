type Repository implements Node & PackageOwner & ProjectOwner & ProjectV2Recent & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable {
  """
  Whether or not a pull request head branch that is behind its base branch can
  always be updated even if it is not required to be up to date before merging.
  """
  allowUpdateBranch: Boolean!

  """
  Identifies the date and time when the repository was archived.
  """
  archivedAt: DateTime

  """
  A list of users that can be assigned to issues in this repository.
  """
  assignableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login
    """
    query: String
  ): UserConnection!

  """
  Whether or not Auto-merge can be enabled on pull requests in this repository.
  """
  autoMergeAllowed: Boolean!

  """
  A list of branch protection rules for this repository.
  """
  branchProtectionRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BranchProtectionRuleConnection!

  """
  Returns the code of conduct for this repository
  """
  codeOfConduct: CodeOfConduct

  """
  Information extracted from the repository's `CODEOWNERS` file.
  """
  codeowners(
    """
    The ref name used to return the associated `CODEOWNERS` file.
    """
    refName: String
  ): RepositoryCodeowners

  """
  A list of collaborators associated with the repository.
  """
  collaborators(
    """
    Collaborators affiliation level with a repository.
    """
    affiliation: CollaboratorAffiliation

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    The login of one specific collaborator.
    """
    login: String

    """
    Filters users with query on user name and login
    """
    query: String
  ): RepositoryCollaboratorConnection

  """
  A list of commit comments associated with the repository.
  """
  commitComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommitCommentConnection!

  """
  Returns a list of contact links associated to the repository
  """
  contactLinks: [RepositoryContactLink!]

  """
  Identifies the date and time when the object was created.
  """
  createdAt: DateTime!

  """
  Identifies the primary key from the database.
  """
  databaseId: Int

  """
  The Ref associated with the repository's default branch.
  """
  defaultBranchRef: Ref

  """
  Whether or not branches are automatically deleted when merged in this repository.
  """
  deleteBranchOnMerge: Boolean!

  """
  A list of dependency manifests contained in the repository
  """
  dependencyGraphManifests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Cursor to paginate dependencies
    """
    dependenciesAfter: String

    """
    Number of dependencies to fetch
    """
    dependenciesFirst: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Flag to scope to only manifests with dependencies
    """
    withDependencies: Boolean
  ): DependencyGraphManifestConnection @preview(toggledBy: "hawkgirl-preview")

  """
  A list of deploy keys that are on this repository.
  """
  deployKeys(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DeployKeyConnection!

  """
  Deployments associated with the repository
  """
  deployments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Environments to list deployments for
    """
    environments: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for deployments returned from the connection.
    """
    orderBy: DeploymentOrder = { field: CREATED_AT, direction: ASC }
  ): DeploymentConnection!

  """
  The description of the repository.
  """
  description: String

  """
  The description of the repository rendered to HTML.
  """
  descriptionHTML: HTML!

  """
  Returns a single discussion from the current repository by number.
  """
  discussion(
    """
    The number for the discussion to be returned.
    """
    number: Int!
  ): Discussion

  """
  A list of discussion categories that are available in the repository.
  """
  discussionCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter by categories that are assignable by the viewer.
    """
    filterByAssignable: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DiscussionCategoryConnection!

  """
  A discussion category by slug.
  """
  discussionCategory(
    """
    The slug of the discussion category to be returned.
    """
    slug: String!
  ): DiscussionCategory

  """
  A list of discussions that have been opened in the repository.
  """
  discussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Only include discussions that belong to the category with this ID.
    """
    categoryId: ID = null

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for discussions returned from the connection.
    """
    orderBy: DiscussionOrder = { field: UPDATED_AT, direction: DESC }

    """
    A list of states to filter the discussions by.
    """
    states: [DiscussionState!] = []
  ): DiscussionConnection!

  """
  The number of kilobytes this repository occupies on disk.
  """
  diskUsage: Int

  """
  Returns a single active environment from the current repository by name.
  """
  environment(
    """
    The name of the environment to be returned.
    """
    name: String!
  ): Environment

  """
  A list of environments that are in this repository.
  """
  environments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EnvironmentConnection!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  Whether this repository allows forks.
  """
  forkingAllowed: Boolean!

  """
  A list of direct forked repositories.
  """
  forks(
    """
    Array of viewer's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    current viewer owns.
    """
    affiliations: [RepositoryAffiliation]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for repositories returned from the connection
    """
    orderBy: RepositoryOrder

    """
    Array of owner's affiliation options for repositories returned from the
    connection. For example, OWNER will include only repositories that the
    organization or user being viewed owns.
    """
    ownerAffiliations: [RepositoryAffiliation] = [OWNER, COLLABORATOR]

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  The funding links for this repository
  """
  fundingLinks: [FundingLink!]!

  """
  Indicates if the repository has the Discussions feature enabled.
  """
  hasDiscussionsEnabled: Boolean!

  """
  Indicates if the repository has issues feature enabled.
  """
  hasIssuesEnabled: Boolean!

  """
  Indicates if the repository has the Projects feature enabled.
  """
  hasProjectsEnabled: Boolean!

  """
  Whether vulnerability alerts are enabled for the repository.
  """
  hasVulnerabilityAlertsEnabled: Boolean!

  """
  Indicates if the repository has wiki feature enabled.
  """
  hasWikiEnabled: Boolean!

  """
  The repository's URL.
  """
  homepageUrl: URI
  id: ID!

  """
  The interaction ability settings for this repository.
  """
  interactionAbility: RepositoryInteractionAbility

  """
  Indicates if the repository is unmaintained.
  """
  isArchived: Boolean!

  """
  Returns true if blank issue creation is allowed
  """
  isBlankIssuesEnabled: Boolean!

  """
  Returns whether or not this repository disabled.
  """
  isDisabled: Boolean!

  """
  Returns whether or not this repository is empty.
  """
  isEmpty: Boolean!

  """
  Identifies if the repository is a fork.
  """
  isFork: Boolean!

  """
  Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
  """
  isInOrganization: Boolean!

  """
  Indicates if the repository has been locked or not.
  """
  isLocked: Boolean!

  """
  Identifies if the repository is a mirror.
  """
  isMirror: Boolean!

  """
  Identifies if the repository is private or internal.
  """
  isPrivate: Boolean!

  """
  Returns true if this repository has a security policy
  """
  isSecurityPolicyEnabled: Boolean

  """
  Identifies if the repository is a template that can be used to generate new repositories.
  """
  isTemplate: Boolean!

  """
  Is this repository a user configuration repository?
  """
  isUserConfigurationRepository: Boolean!

  """
  Returns a single issue from the current repository by number.
  """
  issue(
    """
    The number for the issue to be returned.
    """
    number: Int!
  ): Issue

  """
  Returns a single issue-like object from the current repository by number.
  """
  issueOrPullRequest(
    """
    The number for the issue to be returned.
    """
    number: Int!
  ): IssueOrPullRequest

  """
  Returns a list of issue templates associated to the repository
  """
  issueTemplates: [IssueTemplate!]

  """
  A list of issues that have been opened in the repository.
  """
  issues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filtering options for issues returned from the connection.
    """
    filterBy: IssueFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for issues returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the issues by.
    """
    states: [IssueState!]
  ): IssueConnection!

  """
  Returns a single label by name
  """
  label(
    """
    Label name
    """
    name: String!
  ): Label

  """
  A list of labels associated with the repository.
  """
  labels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for labels returned from the connection.
    """
    orderBy: LabelOrder = { field: CREATED_AT, direction: ASC }

    """
    If provided, searches labels by name and description.
    """
    query: String
  ): LabelConnection

  """
  A list containing a breakdown of the language composition of the repository.
  """
  languages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: LanguageOrder
  ): LanguageConnection

  """
  Get the latest release for the repository if one exists.
  """
  latestRelease: Release

  """
  The license associated with the repository
  """
  licenseInfo: License

  """
  The reason the repository has been locked.
  """
  lockReason: RepositoryLockReason

  """
  A list of Users that can be mentioned in the context of the repository.
  """
  mentionableUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters users with query on user name and login
    """
    query: String
  ): UserConnection!

  """
  Whether or not PRs are merged with a merge commit on this repository.
  """
  mergeCommitAllowed: Boolean!

  """
  How the default commit message will be generated when merging a pull request.
  """
  mergeCommitMessage: MergeCommitMessage!

  """
  How the default commit title will be generated when merging a pull request.
  """
  mergeCommitTitle: MergeCommitTitle!

  """
  The merge queue for a specified branch, otherwise the default branch if not provided.
  """
  mergeQueue(
    """
    The name of the branch to get the merge queue for. Case sensitive.
    """
    branch: String
  ): MergeQueue

  """
  Returns a single milestone from the current repository by number.
  """
  milestone(
    """
    The number for the milestone to be returned.
    """
    number: Int!
  ): Milestone

  """
  A list of milestones associated with the repository.
  """
  milestones(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for milestones.
    """
    orderBy: MilestoneOrder

    """
    Filters milestones with a query on the title
    """
    query: String

    """
    Filter by the state of the milestones.
    """
    states: [MilestoneState!]
  ): MilestoneConnection

  """
  The repository's original mirror URL.
  """
  mirrorUrl: URI

  """
  The name of the repository.
  """
  name: String!

  """
  The repository's name with owner.
  """
  nameWithOwner: String!

  """
  A Git object in the repository
  """
  object(
    """
    A Git revision expression suitable for rev-parse
    """
    expression: String

    """
    The Git object ID
    """
    oid: GitObjectID
  ): GitObject

  """
  The image used to represent this repository in Open Graph data.
  """
  openGraphImageUrl: URI!

  """
  The User owner of the repository.
  """
  owner: RepositoryOwner!

  """
  A list of packages under the owner.
  """
  packages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Find packages by their names.
    """
    names: [String]

    """
    Ordering of the returned packages.
    """
    orderBy: PackageOrder = { field: CREATED_AT, direction: DESC }

    """
    Filter registry package by type.
    """
    packageType: PackageType

    """
    Find packages in a repository by ID.
    """
    repositoryId: ID
  ): PackageConnection!

  """
  The repository parent, if this is a fork.
  """
  parent: Repository

  """
  A list of discussions that have been pinned in this repository.
  """
  pinnedDiscussions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PinnedDiscussionConnection!

  """
  A list of pinned issues for this repository.
  """
  pinnedIssues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PinnedIssueConnection

  """
  The primary language of the repository's code.
  """
  primaryLanguage: Language

  """
  Find project by number.
  """
  project(
    """
    The project number to find.
    """
    number: Int!
  ): Project

  """
  Finds and returns the Project according to the provided Project number.
  """
  projectV2(
    """
    The Project number.
    """
    number: Int!
  ): ProjectV2

  """
  A list of projects under the owner.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for projects returned from the connection
    """
    orderBy: ProjectOrder

    """
    Query to search projects by, currently only searching by name.
    """
    search: String

    """
    A list of states to filter the projects by.
    """
    states: [ProjectState!]
  ): ProjectConnection!

  """
  The HTTP path listing the repository's projects
  """
  projectsResourcePath: URI!

  """
  The HTTP URL listing the repository's projects
  """
  projectsUrl: URI!

  """
  List of projects linked to this repository.
  """
  projectsV2(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    How to order the returned projects.
    """
    orderBy: ProjectV2Order = { field: NUMBER, direction: DESC }

    """
    A project to search for linked to the repo.
    """
    query: String
  ): ProjectV2Connection!

  """
  Returns a single pull request from the current repository by number.
  """
  pullRequest(
    """
    The number for the pull request to be returned.
    """
    number: Int!
  ): PullRequest

  """
  Returns a list of pull request templates associated to the repository
  """
  pullRequestTemplates: [PullRequestTemplate!]

  """
  A list of pull requests that have been opened in the repository.
  """
  pullRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    The base ref name to filter the pull requests by.
    """
    baseRefName: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The head ref name to filter the pull requests by.
    """
    headRefName: String

    """
    A list of label names to filter the pull requests by.
    """
    labels: [String!]

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for pull requests returned from the connection.
    """
    orderBy: IssueOrder

    """
    A list of states to filter the pull requests by.
    """
    states: [PullRequestState!]
  ): PullRequestConnection!

  """
  Identifies the date and time when the repository was last pushed to.
  """
  pushedAt: DateTime

  """
  Whether or not rebase-merging is enabled on this repository.
  """
  rebaseMergeAllowed: Boolean!

  """
  Recent projects that this user has modified in the context of the owner.
  """
  recentProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectV2Connection!

  """
  Fetch a given ref from the repository
  """
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    """
    qualifiedName: String!
  ): Ref

  """
  Fetch a list of refs from the repository
  """
  refs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    DEPRECATED: use orderBy. The ordering direction.
    """
    direction: OrderDirection

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for refs returned from the connection.
    """
    orderBy: RefOrder

    """
    Filters refs with query on name
    """
    query: String

    """
    A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    """
    refPrefix: String!
  ): RefConnection

  """
  Lookup a single release given various criteria.
  """
  release(
    """
    The name of the Tag the Release was created from
    """
    tagName: String!
  ): Release

  """
  List of releases which are dependent on this repository.
  """
  releases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """
  A list of applied repository-topic associations for this repository.
  """
  repositoryTopics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RepositoryTopicConnection!

  """
  The HTTP path for this repository
  """
  resourcePath: URI!

  """
  The security policy URL.
  """
  securityPolicyUrl: URI

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """
    How many characters to return.
    """
    limit: Int = 200
  ): HTML!

  """
  Whether or not squash-merging is enabled on this repository.
  """
  squashMergeAllowed: Boolean!

  """
  How the default commit message will be generated when squash merging a pull request.
  """
  squashMergeCommitMessage: SquashMergeCommitMessage!

  """
  How the default commit title will be generated when squash merging a pull request.
  """
  squashMergeCommitTitle: SquashMergeCommitTitle!

  """
  Whether a squash merge commit can use the pull request title as default.
  """
  squashPrTitleUsedAsDefault: Boolean!
    @deprecated(
      reason: "`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC."
    )

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  Returns a count of how many stargazers there are on this object
  """
  stargazerCount: Int!

  """
  A list of users who have starred this starrable.
  """
  stargazers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Order for connection
    """
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Returns a list of all submodules in this repository parsed from the
  .gitmodules file as of the default branch's HEAD commit.
  """
  submodules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmoduleConnection!

  """
  Temporary authentication token for cloning this repository.
  """
  tempCloneToken: String

  """
  The repository from which this repository was generated, if any.
  """
  templateRepository: Repository

  """
  Identifies the date and time when the object was last updated.
  """
  updatedAt: DateTime!

  """
  The HTTP URL for this repository
  """
  url: URI!

  """
  Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  """
  usesCustomOpenGraphImage: Boolean!

  """
  Indicates whether the viewer has admin permissions on this repository.
  """
  viewerCanAdminister: Boolean!

  """
  Can the current viewer create new projects on this owner.
  """
  viewerCanCreateProjects: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Indicates whether the viewer can update the topics of this repository.
  """
  viewerCanUpdateTopics: Boolean!

  """
  The last commit email for the viewer.
  """
  viewerDefaultCommitEmail: String

  """
  The last used merge method by the viewer or the default for the repository.
  """
  viewerDefaultMergeMethod: PullRequestMergeMethod!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!

  """
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  """
  viewerPermission: RepositoryPermission

  """
  A list of emails this viewer can commit with.
  """
  viewerPossibleCommitEmails: [String!]

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState

  """
  Indicates the repository's visibility level.
  """
  visibility: RepositoryVisibility!

  """
  Returns a single vulnerability alert from the current repository by number.
  """
  vulnerabilityAlert(
    """
    The number for the vulnerability alert to be returned.
    """
    number: Int!
  ): RepositoryVulnerabilityAlert

  """
  A list of vulnerability alerts that are on this repository.
  """
  vulnerabilityAlerts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filter by the scope of the alert's dependency
    """
    dependencyScopes: [RepositoryVulnerabilityAlertDependencyScope!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filter by the state of the alert
    """
    states: [RepositoryVulnerabilityAlertState!]
  ): RepositoryVulnerabilityAlertConnection

  """
  A list of users watching the repository.
  """
  watchers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Whether contributors are required to sign off on web-based commits in this repository.
  """
  webCommitSignoffRequired: Boolean!
}
